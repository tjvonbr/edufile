// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  DISTRICT_USER
  REGIONAL_ADMIN
  SUPER_ADMIN
}

model User {
  id          String       @id @default(uuid())
  firstName   String
  lastName    String
  email       String       @unique
  role        UserRole
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  @@map("users")
}

model RegionalOffice {
  id                String              @id @default(uuid())
  ncesRegionId      String
  region            String              
  name              String
  schoolDistricts   SchoolDistrict[]

  @@map("regional_offices")
}

model ComplianceRequirement {
  id                String              @id @default(uuid())
  name              String              
  year              Int
  attachmentUrl     String?
  schoolDistricts   DistrictComplianceRequirements[]

  @@map("compliance_requirements")
}
model SchoolDistrict {
  id                          String            @id @default(uuid())
  stateId                     String           
  ncesDistrictId              String 
  name                        String
  administrator               String?
  phone                       String?
  mailingAddress              String?
  city                        String?
  state                       String?
  zip                         String?
  zipPlusFour                 String?
  regionalOfficeId            String?
  regionalOffice              RegionalOffice?  @relation(fields: [regionalOfficeId], references: [id], onDelete: Cascade)
  complianceRequirements      DistrictComplianceRequirements[]

  @@map("school_districts")
}

enum ComplianceRequirementStatus {
  INCOMPLETE
  UNDER_REVIEW
  APPROVED
  REJECTED
}

model DistrictComplianceRequirements {
  id                          String                        @id @default(uuid())
  schoolDistrictId            String
  schoolDistrict              SchoolDistrict                @relation(fields: [schoolDistrictId], references: [id], onDelete: Cascade)
  complianceRequirementId     String
  complianceRequirement       ComplianceRequirement         @relation(fields: [complianceRequirementId], references: [id], onDelete: Cascade)
  status                      ComplianceRequirementStatus   @default(INCOMPLETE)

  @@map("district_compliance_requirements")
}